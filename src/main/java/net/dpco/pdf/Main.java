package net.dpco.pdf;

import net.dpco.pdf.entity.*;
import net.dpco.pdf.enums.*;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import java.time.LocalDateTime;
import java.util.*;

public class Main {

  public static void main(String[] args) {
    SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
    Session session = sessionFactory.openSession();
    Transaction transaction = session.beginTransaction();
    Applicant applicant = new Applicant();
    applicant.setNationalCode("4460033641");
    applicant.setAlternativeMobileNo(9396492592L);
    applicant.setBirthCertificateNo("4460033641");
    applicant.setBirthCertificateSerialNo("الف/۴");
    applicant.setBirthCertificateSeries("ب");
    applicant.setBirthDate(new Date());
    applicant.setBirthPlace("شیراز");
    Set<Dependant> dependants = new HashSet<>();
    Dependant dependant1 = new Dependant();
    dependant1.setApplicant(applicant);
    dependant1.setBirthYear("۱۳۹۶");
    dependant1.setFirstName("جواد");
    dependant1.setGender(Gender.MALE);
    dependant1.setJobTitle("کارمند");
    dependant1.setLastName("اریش");
    dependant1.setMaritalStatus(MaritalStatus.SINGLE);
    dependant1.setNationalCode("۱۲۳۶۵۲۱۴");
    dependant1.setPhysicalStatus(PhysicalStatus.HEALTHY);
    dependant1.setRelationshipWithApplicant(RelationshipWithApplicant.OTHER);
    dependant1.setCreateDateTime(LocalDateTime.now());
    dependant1.setUpdateDateTime(LocalDateTime.now());

    Dependant dependant2 = new Dependant();
    dependant2.setApplicant(applicant);
    dependant2.setBirthYear("۱۳۹۶");
    dependant2.setFirstName("محمود");
    dependant2.setGender(Gender.MALE);
    dependant2.setJobTitle("کارمند");
    dependant2.setLastName("اریش");
    dependant2.setMaritalStatus(MaritalStatus.SINGLE);
    dependant2.setNationalCode("۱۲۳۶۵۲۱۴");
    dependant2.setPhysicalStatus(PhysicalStatus.HEALTHY);
    dependant2.setRelationshipWithApplicant(RelationshipWithApplicant.OTHER);
    dependant2.setCreateDateTime(LocalDateTime.now());
    dependant2.setUpdateDateTime(LocalDateTime.now());
    dependants.add(dependant1);
    dependants.add(dependant2);
    applicant.setDependants(dependants);
    applicant.setEducationLevel(EducationLevel.BACHELOR);
    applicant.setElite(false);
    applicant.setEmail("bizhan.laripour@gmail.com");
    applicant.setFatherName("قاسم");
    applicant.setFirstName("بیژن");
    applicant.setGender(Gender.MALE);
    applicant.setHeadHouseStatus(HeadHouseStatus.MARRIED_OR_HEADHOUSE);
    applicant.setIncomeLevel(IncomeLevel.UP_TO_2);
    applicant.setInvestmentAmountLevel(InvestmentAmountLevel.UP_TO_30);
    applicant.setIp("192.168.0.0");
    applicant.setIsargar(false);
    applicant.setIssuedPlace("شیراز");
    applicant.setJanbazan(false);
    Job job = new Job();
    Address address = new Address();
    address.setAddress("تهران");
    address.setPostalCode("123652");
    Center center = new Center(1L , "تهران" , "تهران" ,false);
    address.setCenter(center);
    address.setCreateDateTime(LocalDateTime.now());
    address.setUpdateDateTime(LocalDateTime.now());
    job.setAddress(address);
    job.setJobType(JobType.AZAD);
    job.setTitle("کارمند");
    job.setCreateDateTime(LocalDateTime.now());
    job.setUpdateDateTime(LocalDateTime.now());
    applicant.setJob(job);
    applicant.setKhanevadeShohada(false);
    applicant.setKhanevahehTahtPosheshKhas(false);
    applicant.setLand(null);
    applicant.setLandLineNo(null);
    applicant.setLastName("لاری بور");
    applicant.setMaritalStatus(MaritalStatus.MARRIED);
    applicant.setMobileNo(9396492592L);
    applicant.setPaybackAmountLevel(PaybackAmountLevel.MORE_THAN_2);
    applicant.setPhysicalStatus(PhysicalStatus.HEALTHY);
    ResidenceRecord residenceRecord = new ResidenceRecord();
    residenceRecord.setAddress(address);
    residenceRecord.setApplicant(applicant);
    residenceRecord.setFromDate(new Date());
    residenceRecord.setResidenceCase(ResidenceCase.CURRENT);
    residenceRecord.setToDate(new Date());
    residenceRecord.setCreateDateTime(LocalDateTime.now());
    residenceRecord.setUpdateDateTime(LocalDateTime.now());
    Set<ResidenceRecord> residenceRecords = new HashSet<>();
    residenceRecords.add(residenceRecord);
    applicant.setResidenceRecords(residenceRecords);
    applicant.setTrackingCode(4460033641L);
    applicant.setVerificationCode(4460033641L);
    applicant.setCreateDateTime(LocalDateTime.now());
    applicant.setUpdateDateTime(LocalDateTime.now());
    Set<Spouse> spouses = new HashSet<>();
    Spouse spouse1 = new Spouse();
    spouse1.setApplicant(applicant);
    spouse1.setBirthCertificateNo("123");
    spouse1.setBirthDate(new Date());
    spouse1.setBirthPlace("شیراز");
    spouse1.setEducationLevel(EducationLevel.BACHELOR);
    spouse1.setFatherName("جعفر");
    spouse1.setGender(Gender.FEMALE);
    spouse1.setFirstName("فاطمه");
    spouse1.setIssuedPlace("تهران");
    spouse1.setJob(job);
    spouse1.setLastName("اختصاری");
    spouse1.setMobileNo("1236549874");
    spouse1.setNationalCode("123456859");
    spouse1.setPhysicalStatus(PhysicalStatus.HEALTHY);
    spouse1.setCreateDateTime(LocalDateTime.now());
    spouse1.setUpdateDateTime(LocalDateTime.now());

    Spouse spouse2 = new Spouse();
    spouse2.setApplicant(applicant);
    spouse2.setBirthCertificateNo("123");
    spouse2.setBirthDate(new Date());
    spouse2.setBirthPlace("شیراز");
    spouse2.setEducationLevel(EducationLevel.BACHELOR);
    spouse2.setFatherName("جعفر");
    spouse2.setGender(Gender.FEMALE);
    spouse2.setFirstName("لیلا");
    spouse2.setIssuedPlace("تهران");
    spouse2.setJob(job);
    spouse2.setLastName("اسفندیاری");
    spouse2.setMobileNo("1236549874");
    spouse2.setNationalCode("123456859");
    spouse2.setPhysicalStatus(PhysicalStatus.HEALTHY);
    spouse2.setCreateDateTime(LocalDateTime.now());
    spouse2.setUpdateDateTime(LocalDateTime.now());

    spouses.add(spouse1);
    spouses.add(spouse2);
    applicant.setSpouses(spouses);

    session.save(applicant);
    transaction.commit();
    session.close();
    sessionFactory.close();

  }
}
